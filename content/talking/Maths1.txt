 I hate talking about myself. I don't like bragging. I don't like really promoting myself in any way. And I know this comes as a problem when trying to write a CV or get a card for a job, because it means I tend to underplay my successes and my achievements, really my skills in general. And this has been true my whole life. I studied maths at Cambridge. I was well ingratiated by staff who expected me to be on the fast-tracked professorship, because I have an exceptionally creative mind. I took highly complex mathematical topics, and to me, they were fun. I did about three times as much work as a student needed to do, because it wasn't just one feature of maths that I enjoyed. Like, a lot of my peers did physics, or they did combinatorics, or they did algebra. But I did it all. There was only really one subject I didn't study, which was number theory. But since graduating, I've actually found Introduction to Generating Functionology. I can't remember the exact name of it. But it's basically based off of Timothy Gower's work that goes and transfers a lot of number theory concepts into sort of more analytic methods. And I absolutely loved that book. So I can now confidently say that there isn't a single area of mathematics I don't enjoy. When my lectures conflicted, and I didn't have time to, say, go to the general relativity lecture, because I was at a different statistics lecture, I would read the course notes in my own time. I would study up. I would go over exam papers. I would enjoy it as much as I could. And I really did thrive in that environment, because I could wake up in the morning, start working hard, and know that I didn't have to stop until I went to bed. And when I was sitting having lunch, I'd be pottering over little bits and pieces, thinking about this and that, and then I'd come back to my work, sit down, write out some of the things I thought of, and then move on with my day. As I got more deep into mathematics, I sort of found a split in my intentions. When it came to the more applied side of things, I found I just wanted to use a computer to do the computations. Like, for me, the idea of sitting and writing eight pages of calculations to do what's essentially a three-line function call on most modern computers, in most modern programming, just kind of seemed an arduous waste of time to me. But doing the same kind of length of work about a rigorous logical proof, which couldn't be done by computers, seemed worthwhile. It was entertaining. So, as I went higher up the curriculum, I moved more away from physics, which is what I was actually originally admitted into university for maths and physics. It was a double major. I then sort of stopped focusing on the physics and started focusing more on the pure side, eventually specializing into analysis, probability, and logic. I still studied physics, like thermodynamics, general relativity, quantum mechanics, like electromagnetism. They were all fantastic. I loved them to bits. But they weren't my focus. I was reading them in my spare time for funsies. Because I was focusing on things like prepositional logic, how to deduce what's true, sort of the philosophical constraints around mathematical knowledge. Now, when you get that, and you start to be able to say, OK, here is a thing that we think is true, and we can sort of construct the model that it is true in, well, it's like, well, now we know it's a consistent set of axioms. We know that this thing has some true meaning to it, because we've got a model of it. But that doesn't make it universally true. It doesn't make it an objective fact of reality in and of itself. It's an objective fact inside that model. And that kind of boundary was a very topological idea to me, very geometric, which really tied in with my loves, and made logic even cooler to me. And I find that that mode of thinking, that understanding of where is this thing true, where is it false, where is the line between them, actually translates to a lot of really useful skills, especially when talking to computers. Because you're able to speak to a computer and say, OK, here's the thing I want you to do. And if you really understand what computers can and can't do, then you've already got an idea of when these questions become sort of nonsense, when it becomes a meaningless thing to ask a computer to do something. And when you're writing your own functions, your own code, and you start to go, OK, these are the things I want to take into the code, this is how I want to process it, and this is the kind of thing I want to get out of it, you start to be able to go, OK, well, what are the edge cases? Where might this break down? What happens if we try to put the wrong type of input into it? If we expect the input to be an integer, have we validated that? Have we proven that it's going to be an integer? Or is it a string? Or is it just a floating point number? What happens if you put 3.1 in when your code expects 3? And I find that that's the sort of thing that's really easy to not think about, but I find it much more interesting to think about it, to actually spend my time and effort figuring out how could this code break? Because I would much rather my code broke when I was developing it, than when it went into production. Couple that with my deep and very eclectic mathematical knowledge means that I can conceptualise a lot of very complex ideas and problems, and I can sort of just get cracking on how to solve them. Of course, I might need to look up bits and pieces here and there, as everyone does, but fundamentally, I know how computers work. I've written Assembler. I've even gone and sort of had a look at machine code in my youth because I was curious how the Assembler worked. And I've worked on sort of languages at every complexity level, all the way up to talking to an LLM and seeing if it can produce any meaningful code, and then laughing at the results. But I always try to find something new, something interesting, something harder, because I don't like sitting still. I don't like doing the easy thing because it's easy. I like being challenged. And a lot of people say that to try and sort of get credit, and that always upsets me, because most of those people weren't working 100-hour weeks when they were 18, because that's what I was doing. And it was the time of my life. And the reason I was doing that was because I was being challenged every day. I knew that when I woke up, I could work for 15 hours, and I would just have a blast the whole time. And I knew I could do that and still have time to go out for ice cream with friends and have a nice dinner. And I just was efficient with my time.