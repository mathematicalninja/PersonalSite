My father was a programmer, my sister was a programmer, so I was exposed to computers and coding in general from a very young age. So I honestly can't say when I started. But I remember the early days of the internet being a thing, scraping out of websites their CSS to tweak what things look like, messing around with HTML and JavaScript to sort of create basic functionality of stuff.

And then working with my dad to try and create a database to store information about Yu-Gi-Oh! cards, because I found that the Yu-Gi-Oh! wiki had too much information, wasn't really well sorted, and I couldn't use it to keep track of what cards I had. All the while, with my dad was opening up desktops in front of me which meant that I was exposed to what it all looks like and how it all works. And then as I grew up, I used code here and there, just little bits and pieces. Like, if I was doing some maths and I wasn't sure quite how to do it, I could just as easily crack open a calculator as a piece of Python to figure it out.

But then when I was at university, I decided to try and take it a bit more seriously and do a bit more hard work in it. And I started, like most people do, putting my efforts into Python. Easy enough language, good to work with, and could let get me things done quite quickly. I then obviously had to do some work in languages like MATLAB and LaTeX as part of my maths degree. I did small things like I converted an old handwritten rulebook for Mahjong, my mother had, into a sparkly PDF that she could actually use. And I did it fairly programmatically so that we could tweak things as I went along. And I was able to send her a draft. She would be able to say, "oh, this isn't quite right", or "there's an error here" and I could tweak those things. For Example, I could change the size of the tiles, or the order of the hands with a single line of code. Everything worked really well and turned out really nice.

I worked for a friend in their company for a while, doing some of the very low language language control. Because they had developed a proprietary language, which the whole business was based on. So myself, them, and three other people were the only people in the world who'd coded in the language source. And it was sort of tackling their proprietary language, making sure it was compiled and acted correctly, ensuring that there were no security leaks. Because that was sort of the big focus of the language: the forms that were being filled in by clients couldn't accidentally execute code. Because the code was being used by clients with very sensitive data, and it was being exposed to the public, in client built applications which we couldn't guarantee weren't being miscoded. So we had to be very careful that things would never leak.

While doing this, I sort of realised that backend is where I'm most comfortable. I can sit with a very hard problem and work on it with great focus, just sit down and iterate out, "okay, where are the likely points of failure", "what's the exact features we need this code to do", and step by step go through those things. But I've also spent a lot of my life in artistic pursuits, so I kind of bemoaned the fact that my front-end skills weren't as great. I've been reading books on design since I was about 13, because I absolutely love the stuff. So I thought, let's see if I can actually use any of it, see what it looks like. So I picked up React, put together a website, and didn't really like the result. Like, it was perfectly functional, it did the thing, but I'd sort of done it in a cumbersome way. And I realised that, again, these skills aren't up to scratch. So I worked hard, sort of tweaked around, figured more stuff out, got more familiar with what the web dev ecosystem looks like.

And recently I sort of restarted the website, but this time I tried to do it in Nuxt, because really the frameworks are all interchangeable. They can all do the same things in a similar sort of way. So I wanted to expose myself to a different framework to see how these things translate. Because fundamentally when I'm coding, that's how I see everything. I start from a fairly abstract or theoretical perspective of what computers can do, and then I just translate that into the specifics of whatever language I'm using needs. At this point, I've coded in over 20 languages, maybe 30 now, and I can pick new languages up very fast, because I understand so much of the deeper rooted truths of what these things are. So especially when you're dealing with things like frameworks of JavaScript rather than entirely new implementations, you find that sort of a lot of the theoretical constraints of the language, like the fact that JavaScript has garbage collection, that it's a runtime language without a compiler, those things you understand, you know what you're doing, and you can kind of move forwards with it, and then you can look at, say, Reactor Vue or whatever, and say, okay, how does this framework translate its code into JavaScript? And then you know you're still working with the fundamental limitations of JavaScript. Like, you've got truthy values, you don't have sort of constant truth types. Well, obviously you have the types true and false, that's not what I'm saying. I'm saying things like, an empty string can be read as false, which is a pet peeve of minor languages, and a subject for another time.